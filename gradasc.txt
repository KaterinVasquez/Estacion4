#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <PubSubClient.h>
#define RST_PIN 14      // Pin de reinicio del MFRC522
#define SS_PIN 5        // Pin de selección de esclavo del MFRC522
// Parámetros de conexión WiFi
#define ssid "Kat"
#define password "12345678"

// Parámetros de conexión MQTT
#define mqtt_server "qhali.online"
#define mqtt_port 1883
#define mqtt_user "esp"
#define mqtt_pass "123456"

WiFiClient espClient;
PubSubClient client(espClient);

long lastMsg = 0;
char msg[50];
MFRC522 mfrc522(SS_PIN, RST_PIN); // Crear instancia de MFRC522
bool LecturaAnterior = false;     // Estado previo
String name = "";
// Declarar variables para el control de tiempo
unsigned long tiempoInicio = 0;
unsigned long tiempoFin = 0;
unsigned long tiempoTotal = 0;
// Pines de los sensores ultrasónicos y el sensor IR
const int TRIGGER_PIN1 = 16;
const int ECHO_PIN1 = 17;
const int TRIGGER_PIN2 = 21;
const int ECHO_PIN2 = 22;
const int TRIGGER_PIN3 = 26;
const int ECHO_PIN3 = 25;
const int sensorIRPin = 27; // Sensor IR
int estadoIR;
// Pines de los LEDs (relés)
const int ledGrada1 = 32;
const int ledGrada2 = 4;
const int ledGrada3 = 33;
const int ledVerde = 13;
const int SwitchOnOff = 12;  // Switch de activación (pull-up)
int estadoBotonActual = HIGH;
int estadoBotonAnterior = HIGH;

// Variable de estado para la secuencia de sensores SUBIDA
volatile int estadoSensor = 1;

// Variable de estado para la secuencia de sensores BAJADA
volatile int estadoSensorB = 4;

// Rango de detección para avanzar al siguiente sensor
const int DISTANCIA_MINIMA = 5;
const int DISTANCIA_MAXIMA = 30;

// Variables de estado
volatile bool programaActivo = false;
volatile int secuenciasCompletas = 0;
volatile int subida = 0;
volatile int bajada = 0;
volatile bool enSubida = false;
volatile bool enBajada = false;
volatile bool subidaCompletada = false;  // variable para detectar que la tarea se realizo
volatile bool bajadaCompletada = false;

// Estado anterior del sensor IR para detectar cambios
volatile int estadoIRAnterior = HIGH; // Suponemos que el sensor IR está inicialmente desactivado

// Función para medir distancia con ultrasónicos
int medirDistancia(int triggerPin, int echoPin) {
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);

  long duracion = pulseIn(echoPin, HIGH);
  int distancia = duracion * 0.034 / 2;
  return distancia;
}

// Tarea de Subida
void subidaTask(void *parameter) {
  while (true) {
    if (!programaActivo && secuenciasCompletas >= 3) {
      vTaskDelete(NULL); // Termina la tarea de subida
    }
    if (programaActivo) {
      switch (estadoSensor) {
        case 1: // Grada 1
          if (secuenciasCompletas == 0 && subida == 0 && enSubida && !subidaCompletada) {
            tiempoInicio = millis(); // Registrar el tiempo de inicio
            // Serial.println("Temporizador iniciado.");
          }
          pinMode(TRIGGER_PIN1, OUTPUT);//para subida
          pinMode(ECHO_PIN1, INPUT);//para subida
          // digitalWrite(ledGrada1, LOW);//para subida
          digitalWrite(ledGrada2, HIGH);
          digitalWrite(ledGrada3, HIGH);
          digitalWrite(ledVerde, HIGH);//para subida
          if (medirDistancia(TRIGGER_PIN1, ECHO_PIN1) >= DISTANCIA_MINIMA && medirDistancia(TRIGGER_PIN1, ECHO_PIN1) <= DISTANCIA_MAXIMA) {
            Serial.println("Grada 1 subida");
            digitalWrite(ledGrada1, HIGH); // Apagar LED de Grada 1
            digitalWrite(ledGrada2, LOW);  // Encender LED de Grada 2
            estadoSensor = 2; // Avanzar al siguiente sensor
            desactivarTodos();
            pinMode(TRIGGER_PIN2, OUTPUT);
            pinMode(ECHO_PIN2, INPUT);
          }
          break;

        case 2: // Grada 2
          if (medirDistancia(TRIGGER_PIN2, ECHO_PIN2) >= DISTANCIA_MINIMA && medirDistancia(TRIGGER_PIN2, ECHO_PIN2) <= DISTANCIA_MAXIMA) {
            Serial.println("Grada 2 subida");
            digitalWrite(ledGrada2, HIGH); // Apagar LED de Grada 2
            digitalWrite(ledGrada3, LOW);  // Encender LED de Grada 3
            estadoSensor = 3; // Avanzar al siguiente sensor
            desactivarTodos();
            pinMode(TRIGGER_PIN3, OUTPUT);
            pinMode(ECHO_PIN3, INPUT);
          }
          break;

        case 3: // Grada 3
          if (medirDistancia(TRIGGER_PIN3, ECHO_PIN3) >= DISTANCIA_MINIMA && medirDistancia(TRIGGER_PIN3, ECHO_PIN3) <= DISTANCIA_MAXIMA) {
            Serial.println("Grada 3 subida");
            digitalWrite(ledGrada3, HIGH); // Apagar LED de Grada 3
            digitalWrite(ledVerde, LOW);   // Encender LED de la rampa
            estadoSensor = 4; // Avanzar al sensor IR (Rampa)
            desactivarTodos();
            //                   pinMode(sensorIRPin, INPUT);
          }
          break;

        case 4: // Rampa (Sensor IR)
          // Serial.println("Rampa de subida detectada");
          estadoIR = digitalRead(sensorIRPin); // Leer el estado del sensor IR

          if (estadoIR == LOW && estadoIRAnterior == HIGH) {
            digitalWrite(ledVerde, HIGH); // Apagar LED de la rampa
            estadoSensor = 1; // Reiniciar secuencia
            programaActivo = false; // Finalizar programa después de la rampa
            subidaCompletada = true;  // Marcar como completada
            subida++;
            Serial.print("Subidas completadas: ");
            Serial.println(subida);
            desactivarTodos();
            enSubida = false;  // Dejar de estar en subida
            enBajada = true;   // Estar listo para la bajada
            estadoIRAnterior = estadoIR; // Guardar el estado actual para la siguiente detección
            Serial.println("Subida completada. Ahora espera la bajada.");
            delay(1000);
            digitalWrite(ledVerde, LOW); // para bajada
          }
          break;
      }
    }
    delay(10);
  }
}