#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <PubSubClient.h>

#define SwitchOnOff 12  // Botón conectado al pin 12
#define LedON 4         // LED ON/OFF
#define RST_PIN 14      // Pin de reinicio del MFRC522
#define SS_PIN 5        // Pin de selección de esclavo del MFRC522
// Parámetros de conexión WiFi
#define ssid "Kat"
#define password "12345678"

// Parámetros de conexión MQTT
#define mqtt_server "qhali.online"
#define mqtt_port 1883
#define mqtt_user "esp"
#define mqtt_pass "123456"

WiFiClient espClient;
PubSubClient client(espClient);

const char* topic_python_to_unity = "esp32/data";
long lastMsg = 0;
char msg[50];
// Variables globales para los datos recibidos

int Pasos = 0;
int DistPasos = 0.0;
int Rodillas = 0;

MFRC522 mfrc522(SS_PIN, RST_PIN); // Crear instancia de MFRC522
bool LecturaAnterior = false;     // Estado previo
String name = "";

void setup() {
  pinMode(SwitchOnOff, INPUT_PULLUP);  // Configura el pin del botón como entrada con pull-up interno
  Serial.begin(115200);                // Inicia la comunicación serial
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);  // Enlazar la función callback para manejar mensajes MQTT
  pinMode(LedON, OUTPUT);
  SPI.begin();        // Inicializar bus SPI
  mfrc522.PCD_Init(); // Inicializar MFRC522
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  static int estadoAnterior = HIGH;   // Estado previo del botón (comienza en HIGH debido a INPUT_PULLUP)
  int estadoActual = digitalRead(SwitchOnOff); // Lee el estado actual del botón

  // Verifica si hubo un cambio en el estado del botón
  if (estadoActual != estadoAnterior) {
    if (estadoActual == LOW) {  // El botón está presionado
      Serial.println("Sistema Encendido");
      digitalWrite(LedON, HIGH);
      client.publish("sistema/estado", "sistema encendido coloque su tarjeta");
      Serial.println("mensaje enviado al cliente");
      // Permitir nueva lectura de tarjeta solo si el sistema se acaba de encender
      LecturaAnterior = false;

      Serial.println("Coloque su tarjeta...");
    } else if (estadoActual == HIGH) { // El botón no está presionado
      Serial.println("Sistema Apagado");
      digitalWrite(LedON, LOW);
      client.publish("sistema/estado", "sistema apagado");
      Serial.println("mensaje enviado al cliente");
      LecturaAnterior = true;  // Bloquear nuevas lecturas mientras el sistema está apagado
    }

    // Actualiza el estado anterior
    estadoAnterior = estadoActual;
  }

  // Solo proceder si el sistema está encendido y la lectura anterior fue realizada
  if (estadoActual == LOW && !LecturaAnterior) {
    lecturaTarjeta();
    LecturaAnterior = true;  // Marca que la lectura se realizó
  }

  delay(100);  // Pequeño retraso para evitar rebotes
}

void lecturaTarjeta() {
  name = "";
  Serial.println("Esperando tarjeta...");
  MFRC522::MIFARE_Key key;
  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;
  byte block;
  byte len;
  MFRC522::StatusCode status;

  // Esperar hasta que se detecte una tarjeta
  while (!mfrc522.PICC_IsNewCardPresent()) {
    delay(50); // Tiempo de espera para no saturar el procesador
  }

  if (!mfrc522.PICC_ReadCardSerial()) {
    Serial.println("No se pudo leer la tarjeta.");
    return;
  }

  byte buffer[18];
  byte bufferLen = 18;

  // Leer el apellido del bloque 1
  block = 1;
  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));
  if (status == MFRC522::STATUS_OK) {
    status = mfrc522.MIFARE_Read(block, buffer, &bufferLen);
    if (status == MFRC522::STATUS_OK) {
      for (uint8_t i = 0; i < 16; i++) {
        if (buffer[i] >= 32 && buffer[i] < 127) { // Filtra caracteres no imprimibles
          name += char(buffer[i]);
        }
      }
    }
  }